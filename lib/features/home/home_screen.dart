import 'package:flutter/material.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter_naver_map/flutter_naver_map.dart';
import 'package:lottie/lottie.dart';
import 'package:jejunongdi/core/config/environment.dart';
import 'dart:io';

class HomeScreen extends StatefulWidget {
  const HomeScreen({super.key});

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  NaverMapController? mapController;
  bool isMapReady = false;
  String mapError = '';
  int markerCount = 0;
  bool? internetConnected;
  double _sheetExtent = 0.3;
  Set<NMarker> markers = {};

  // Ï†úÏ£ºÏãú Ï§ëÏã¨ Ï¢åÌëú
  static const NLatLng jejuCenter = NLatLng(33.4996, 126.5312);

  @override
  void initState() {
    super.initState();
    print('üè† HomeScreen Ï¥àÍ∏∞Ìôî ÏãúÏûë');
    _checkInternetConnection();
    
    // Ïõπ ÌôòÍ≤ΩÏóêÏÑúÎäî ÏßÄÎèÑÍ∞Ä Î∞îÎ°ú Ï§ÄÎπÑÎêú Í≤ÉÏúºÎ°ú Í∞ÑÏ£º
    if (kIsWeb) {
      setState(() {
        isMapReady = true;
      });
    }
  }

  // Ïù∏ÌÑ∞ÎÑ∑ Ïó∞Í≤∞ ÌôïÏù∏
  Future<void> _checkInternetConnection() async {
    try {
      if (kIsWeb) {
        setState(() {
          internetConnected = true;
        });
        print('‚úÖ Ïõπ ÌîåÎû´Ìèº: Ïù∏ÌÑ∞ÎÑ∑ Ïó∞Í≤∞Îê®ÏúºÎ°ú Í∞ÄÏ†ï');
        return;
      }
      
      print('üåê Ïù∏ÌÑ∞ÎÑ∑ Ïó∞Í≤∞ ÌôïÏù∏ Ï§ë...');
      final result = await InternetAddress.lookup('google.com');
      if (result.isNotEmpty && result[0].rawAddress.isNotEmpty) {
        setState(() {
          internetConnected = true;
        });
        print('‚úÖ Ïù∏ÌÑ∞ÎÑ∑ Ïó∞Í≤∞Îê®');
      }
    } catch (e) {
      setState(() {
        internetConnected = false;
      });
      print('‚ùå Ïù∏ÌÑ∞ÎÑ∑ Ïó∞Í≤∞ ÏïàÎê®: $e');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: NotificationListener<DraggableScrollableNotification>(
        onNotification: (notification) {
          setState(() {
            _sheetExtent = notification.extent;
          });
          return false;
        },
        child: Stack(
          children: [
            // 1. Map (takes full background)
            Positioned.fill(
              child: IgnorePointer(
                ignoring: _sheetExtent > 0.8,
                child: _buildMap(),
              ),
            ),

            // 2. Top floating UI (app bar like)
            if (isMapReady) _buildFloatingUi(context),

            // 3. Draggable bottom sheet
            DraggableScrollableSheet(
              initialChildSize: 0.3,
              minChildSize: 0.1,
              maxChildSize: 0.8,
              expand: true,
              snap: true,
              snapSizes: const [0.1, 0.3, 0.8],
              builder: (BuildContext context, ScrollController scrollController) {
                return Container(
                  decoration: const BoxDecoration(
                    color: Colors.white,
                    borderRadius: BorderRadius.vertical(top: Radius.circular(24)),
                    boxShadow: [
                      BoxShadow(
                        color: Colors.black12,
                        blurRadius: 10,
                        offset: Offset(0, -2),
                      )
                    ],
                  ),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.stretch,
                    children: [
                      // Drag handle
                      Center(
                        child: Container(
                          width: 40,
                          height: 4,
                          margin: const EdgeInsets.symmetric(vertical: 10),
                          decoration: BoxDecoration(
                            color: Colors.grey[300],
                            borderRadius: BorderRadius.circular(2),
                          ),
                        ),
                      ),
                      Expanded(
                        child: SingleChildScrollView(
                          controller: scrollController,
                          child: Padding(
                            padding: const EdgeInsets.all(24.0),
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.stretch,
                              children: [
                                // ÌîåÎû´Ìèº Ï†ïÎ≥¥ ÌëúÏãú
                                Container(
                                  padding: const EdgeInsets.all(12),
                                  margin: const EdgeInsets.only(bottom: 16),
                                  decoration: BoxDecoration(
                                    color: kIsWeb ? Colors.blue[50] : Colors.green[50],
                                    borderRadius: BorderRadius.circular(8),
                                    border: Border.all(
                                      color: kIsWeb ? Colors.blue[200]! : Colors.green[200]!,
                                    ),
                                  ),
                                  child: Row(
                                    children: [
                                      Icon(
                                        kIsWeb ? Icons.web : Icons.phone_android,
                                        color: kIsWeb ? Colors.blue[600] : Colors.green[600],
                                      ),
                                      const SizedBox(width: 8),
                                      Text(
                                        kIsWeb ? 'Ïõπ Î≤ÑÏ†Ñ - ÎÑ§Ïù¥Î≤Ñ Ï†ïÏ†Å ÏßÄÎèÑ' : 'Î™®Î∞îÏùº Î≤ÑÏ†Ñ - ÎÑ§Ïù¥Î≤Ñ ÏßÄÎèÑ',
                                        style: TextStyle(
                                          color: kIsWeb ? Colors.blue[700] : Colors.green[700],
                                          fontWeight: FontWeight.w600,
                                        ),
                                      ),
                                    ],
                                  ),
                                ),
                                
                                // ÏùºÏûêÎ¶¨ Ï∞æÍ∏∞ Î≤ÑÌäº
                                Container(
                                  height: 64,
                                  decoration: BoxDecoration(
                                    borderRadius: BorderRadius.circular(16),
                                    gradient: const LinearGradient(
                                      colors: [
                                        Color(0xFFF2711C),
                                        Color(0xFFFF8C42),
                                      ],
                                    ),
                                    boxShadow: [
                                      BoxShadow(
                                        color: const Color(0xFFF2711C).withOpacity(0.3),
                                        blurRadius: 20,
                                        offset: const Offset(0, 8),
                                      ),
                                    ],
                                  ),
                                  child: ElevatedButton(
                                    onPressed: _showJobSearch,
                                    style: ElevatedButton.styleFrom(
                                      backgroundColor: Colors.transparent,
                                      shadowColor: Colors.transparent,
                                      shape: RoundedRectangleBorder(
                                        borderRadius: BorderRadius.circular(16),
                                      ),
                                    ),
                                    child: const Row(
                                      mainAxisAlignment: MainAxisAlignment.center,
                                      children: [
                                        SizedBox(width: 12),
                                        Text(
                                          'ÏùºÏûêÎ¶¨ Ï∞æÍ∏∞ üîç',
                                          style: TextStyle(
                                            fontSize: 18,
                                            fontWeight: FontWeight.w700,
                                            color: Colors.white,
                                            letterSpacing: 0.5,
                                          ),
                                        ),
                                      ],
                                    ),
                                  ),
                                ),
                                
                                const SizedBox(height: 16),
                                
                                // ÏùºÏÜê Íµ¨ÌïòÍ∏∞ Î≤ÑÌäº
                                Container(
                                  height: 64,
                                  decoration: BoxDecoration(
                                    borderRadius: BorderRadius.circular(16),
                                    gradient: LinearGradient(
                                      colors: [
                                        Colors.white,
                                        Colors.grey[50]!,
                                      ],
                                    ),
                                    border: Border.all(
                                      color: const Color(0xFFF2711C).withOpacity(0.3),
                                      width: 2,
                                    ),
                                    boxShadow: [
                                      BoxShadow(
                                        color: Colors.black.withOpacity(0.05),
                                        blurRadius: 15,
                                        offset: const Offset(0, 4),
                                      ),
                                    ],
                                  ),
                                  child: ElevatedButton(
                                    onPressed: _showWorkerRecruit,
                                    style: ElevatedButton.styleFrom(
                                      backgroundColor: Colors.transparent,
                                      shadowColor: Colors.transparent,
                                      shape: RoundedRectangleBorder(
                                        borderRadius: BorderRadius.circular(16),
                                      ),
                                    ),
                                    child: const Row(
                                      mainAxisAlignment: MainAxisAlignment.center,
                                      children: [
                                        SizedBox(width: 12),
                                        Text(
                                          'ÏùºÏÜê Íµ¨ÌïòÍ∏∞ üë•',
                                          style: TextStyle(
                                            fontSize: 18,
                                            fontWeight: FontWeight.w700,
                                            color: Color(0xFFF2711C),
                                            letterSpacing: 0.5,
                                          ),
                                        ),
                                      ],
                                    ),
                                  ),
                                ),
                              ],
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                );
              },
            ),
          ],
        ),
      ),
    );
  }

  // ÏßÄÎèÑ ÏúÑÏ†Ø ÎπåÎìú (ÌîåÎû´ÌèºÎ≥Ñ Î∂ÑÍ∏∞)
  Widget _buildMap() {
    if (internetConnected == false) {
      return const Center(
        child: Text('‚ùå Ïù∏ÌÑ∞ÎÑ∑Ïóê Ïó∞Í≤∞ÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.\nÏó∞Í≤∞ÏùÑ ÌôïÏù∏ÌïòÍ≥† Ïï±ÏùÑ Îã§Ïãú ÏãúÏûëÌï¥Ï£ºÏÑ∏Ïöî.'),
      );
    }

    if (mapError.isNotEmpty) {
      return Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text('‚ùå ÏßÄÎèÑ Î°úÎî© Ïã§Ìå®: $mapError'),
            const SizedBox(height: 16),
            ElevatedButton(
              onPressed: _retryMapInitialization,
              child: const Text('Ïû¨ÏãúÎèÑ'),
            ),
          ],
        ),
      );
    }

    // Ïõπ ÌôòÍ≤ΩÏù¥Î©¥ Ï†ïÏ†Å ÏßÄÎèÑ Ïù¥ÎØ∏ÏßÄ ÏÇ¨Ïö©
    if (kIsWeb) {
      return _buildStaticMap();
    }

    // Î™®Î∞îÏùº ÌôòÍ≤Ω (Í∏∞Ï°¥ ÎÑ§Ïù¥Î≤ÑÎßµ)
    return _buildNaverMap();
  }

  // Ï†ïÏ†Å ÏßÄÎèÑ Ïù¥ÎØ∏ÏßÄ (ÏõπÏö©)
  Widget _buildStaticMap() {
    final apiKey = EnvironmentConfig.naverMapClientId;
    
    // Ï†úÏ£ºÏãú Ï§ëÏã¨Ïùò Ï†ïÏ†Å ÏßÄÎèÑ URL
    final staticMapUrl = 'https://navermaps.apigw.ntruss.com/map-static/v2/raster-cors?'
        'w=800&h=600'
        '&center=${jejuCenter.longitude},${jejuCenter.latitude}'
        '&level=11'
        '&markers=type:t|size:mid|pos:${jejuCenter.longitude}%20${jejuCenter.latitude}|label:Ï†úÏ£ºÎÜçÎîî'
        '&X-NCP-APIGW-API-KEY-ID=$apiKey';

    return Stack(
      children: [
        // Ï†ïÏ†Å ÏßÄÎèÑ Ïù¥ÎØ∏ÏßÄ
        Container(
          width: double.infinity,
          height: double.infinity,
          decoration: const BoxDecoration(
            color: Colors.grey,
          ),
          child: Image.network(
            staticMapUrl,
            fit: BoxFit.cover,
            loadingBuilder: (context, child, loadingProgress) {
              if (loadingProgress == null) return child;
              return const Center(
                child: CircularProgressIndicator(),
              );
            },
            errorBuilder: (context, error, stackTrace) {
              print('‚ùå Ï†ïÏ†Å ÏßÄÎèÑ Î°úÎî© Ïã§Ìå®: $error');
              return Container(
                color: Colors.grey[300],
                child: const Center(
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Icon(Icons.map, size: 80, color: Colors.grey),
                      SizedBox(height: 16),
                      Text(
                        'ÏßÄÎèÑÎ•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§',
                        style: TextStyle(
                          fontSize: 16,
                          color: Colors.grey,
                        ),
                      ),
                      SizedBox(height: 8),
                      Text(
                        'ÎÑ§Ïù¥Î≤Ñ ÌÅ¥ÎùºÏö∞Îìú ÌîåÎû´ÌèºÏóêÏÑú\nÎèÑÎ©îÏù∏ Îì±Î°ùÏù¥ ÌïÑÏöîÌï©ÎãàÎã§',
                        textAlign: TextAlign.center,
                        style: TextStyle(
                          fontSize: 14,
                          color: Colors.grey,
                        ),
                      ),
                    ],
                  ),
                ),
              );
            },
          ),
        ),
        
        // ÌÅ¥Î¶≠ Í∞ÄÎä•Ìïú ÎßàÏª§ ÏòÅÏó≠Îì§
        ..._buildClickableMarkers(),
      ],
    );
  }

  // ÌÅ¥Î¶≠ Í∞ÄÎä•Ìïú ÎßàÏª§ ÏòÅÏó≠Îì§ (ÏõπÏö©)
  List<Widget> _buildClickableMarkers() {
    return [
      // Ï†úÏ£ºÏãú Í∞êÍ∑§ÎÜçÏû• ÎßàÏª§
      Positioned(
        left: MediaQuery.of(context).size.width * 0.45,
        top: MediaQuery.of(context).size.height * 0.35,
        child: GestureDetector(
          onTap: () => _showMarkerInfo('farm1', 'Ï†úÏ£ºÏãú Í∞êÍ∑§ÎÜçÏû• - Í∞êÍ∑§ ÏàòÌôï ÏùºÏûêÎ¶¨'),
          child: Container(
            padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
            decoration: BoxDecoration(
              color: const Color(0xFFF2711C),
              borderRadius: BorderRadius.circular(8),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.2),
                  blurRadius: 4,
                  offset: const Offset(0, 2),
                ),
              ],
            ),
            child: const Text(
              'üçä Í∞êÍ∑§ÎÜçÏû•',
              style: TextStyle(
                color: Colors.white,
                fontSize: 12,
                fontWeight: FontWeight.bold,
              ),
            ),
          ),
        ),
      ),
      
      // ÏÑúÍ∑ÄÌè¨ Î∏åÎ°úÏΩúÎ¶¨ÎÜçÏû• ÎßàÏª§
      Positioned(
        left: MediaQuery.of(context).size.width * 0.50,
        top: MediaQuery.of(context).size.height * 0.55,
        child: GestureDetector(
          onTap: () => _showMarkerInfo('farm2', 'ÏÑúÍ∑ÄÌè¨ Î∏åÎ°úÏΩúÎ¶¨ÎÜçÏû• - Î∏åÎ°úÏΩúÎ¶¨ Ìè¨Ïû• ÏùºÏûêÎ¶¨'),
          child: Container(
            padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
            decoration: BoxDecoration(
              color: const Color(0xFFF2711C),
              borderRadius: BorderRadius.circular(8),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.2),
                  blurRadius: 4,
                  offset: const Offset(0, 2),
                ),
              ],
            ),
            child: const Text(
              'ü•¶ Î∏åÎ°úÏΩúÎ¶¨ÎÜçÏû•',
              style: TextStyle(
                color: Colors.white,
                fontSize: 12,
                fontWeight: FontWeight.bold,
              ),
            ),
          ),
        ),
      ),
    ];
  }

  // ÎÑ§Ïù¥Î≤ÑÎßµ (Î™®Î∞îÏùºÏö©)
  Widget _buildNaverMap() {
    return NaverMap(
      options: NaverMapViewOptions(
        initialCameraPosition: NCameraPosition(
          target: jejuCenter,
          zoom: 15,
        ),
        mapType: NMapType.basic,
        activeLayerGroups: [NLayerGroup.building, NLayerGroup.traffic],
        minZoom: 5,
        maxZoom: 18,
      ),
      onMapReady: (NaverMapController controller) {
        if (!mounted) return;
        print('ÎÑ§Ïù¥Î≤Ñ ÏßÄÎèÑ onMapReady ÏΩúÎ∞± Ìò∏Ï∂úÎê®');
        setState(() {
          mapController = controller;
          isMapReady = true;
        });
        print('ÎÑ§Ïù¥Î≤Ñ ÏßÄÎèÑ ÏÉùÏÑ±');
        _addSampleMarkers();
      },
      onMapTapped: (point, latLng) {
        print('ÏßÄÎèÑ ÌÉ≠: ${latLng.latitude}, ${latLng.longitude}');
      },
      onCameraChange: (position, reason) {
        // Ïπ¥Î©îÎùº Î≥ÄÍ≤Ω Ïãú ÌïÑÏöîÌïú Î°úÏßÅ
      },
      onCameraIdle: () {
        // Ïπ¥Î©îÎùº Ïù¥Îèô ÏôÑÎ£å Ïãú ÌïÑÏöîÌïú Î°úÏßÅ
      },
    );
  }

  // ÏÉòÌîå ÎßàÏª§Îì§ Ï∂îÍ∞Ä (Î™®Î∞îÏùºÏö©)
  void _addSampleMarkers() {
    if (mapController == null) {
      print('‚ùå mapControllerÍ∞Ä nullÏûÑ');
      return;
    }

    print('üìç ÎßàÏª§ Ï∂îÍ∞Ä ÏãúÏûë');

    try {
      final markerList = [
        NMarker(
          id: 'farm1',
          position: const NLatLng(33.5012, 126.5297),
          caption: NOverlayCaption(text: 'Ï†úÏ£ºÏãú Í∞êÍ∑§ÎÜçÏû•'),
          subCaption: NOverlayCaption(text: 'üçä Í∞êÍ∑§ ÏàòÌôï ÏùºÏûêÎ¶¨'),
        ),
        NMarker(
          id: 'farm2',
          position: const NLatLng(33.2541, 126.5596),
          caption: NOverlayCaption(text: 'ÏÑúÍ∑ÄÌè¨ Î∏åÎ°úÏΩúÎ¶¨ÎÜçÏû•'),
          subCaption: NOverlayCaption(text: 'ü•¶ Î∏åÎ°úÏΩúÎ¶¨ Ìè¨Ïû• ÏùºÏûêÎ¶¨'),
        ),
      ];

      for (final marker in markerList) {
        marker.setOnTapListener((NMarker tappedMarker) {
          final farmNames = {
            'farm1': 'Ï†úÏ£ºÏãú Í∞êÍ∑§ÎÜçÏû• - Í∞êÍ∑§ ÏàòÌôï ÏùºÏûêÎ¶¨',
            'farm2': 'ÏÑúÍ∑ÄÌè¨ Î∏åÎ°úÏΩúÎ¶¨ÎÜçÏû• -  Î∏åÎ°úÏΩúÎ¶¨ Ìè¨Ïû• ÏùºÏûêÎ¶¨',
          };
          
          final info = farmNames[tappedMarker.info.id] ?? 'ÎÜçÏû• Ï†ïÎ≥¥';
          _showMarkerInfo(tappedMarker.info.id, info);
        });
        
        mapController!.addOverlay(marker);
      }
      
      setState(() {
        markerCount = markerList.length;
        markers = markerList.toSet();
      });
      
      print('‚úÖ ${markerList.length}Í∞ú ÎÜçÏû• ÎßàÏª§ Ï∂îÍ∞Ä ÏôÑÎ£å');
    } catch (e) {
      print('‚ùå ÎßàÏª§ Ï∂îÍ∞Ä Ïã§Ìå®: $e');
      setState(() {
        mapError = 'ÎßàÏª§ Ï∂îÍ∞Ä Ïã§Ìå®: $e';
      });
    }
  }

  // ÌîåÎ°úÌåÖ UIÎ•º ÎßåÎìúÎäî Î≥ÑÎèÑÏùò ÏúÑÏ†Ø
  Widget _buildFloatingUi(BuildContext context) {
    return SafeArea(
      child: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 10.0),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            // ÏôºÏ™Ω Î°úÍ≥†
            Container(
              padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 14),
              decoration: BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.circular(30),
                boxShadow: const [
                  BoxShadow(
                    color: Colors.black12,
                    blurRadius: 8,
                    offset: Offset(0, 2),
                  )
                ],
              ),
              child: const Text(
                'Ï†úÏ£º ÎÜçÎîîüçä',
                style: TextStyle(
                  fontWeight: FontWeight.bold,
                  fontSize: 20,
                  color: Color(0xFFF2711C),
                ),
              ),
            ),

            // Ïò§Î•∏Ï™Ω ÏïÑÏù¥ÏΩò Î≤ÑÌäº Í∑∏Î£π
            Container(
              padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
              decoration: BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.circular(30),
                boxShadow: const [
                  BoxShadow(
                    color: Colors.black12,
                    blurRadius: 8,
                    offset: Offset(0, 2),
                  )
                ],
              ),
              child: Row(
                children: [
                  IconButton(
                    onPressed: () {
                      _moveToCurrentLocation();
                    },
                    icon: const Icon(Icons.my_location, size: 26),
                    color: const Color(0xFFF2711C),
                  ),
                  Container(height: 20, width: 1, color: Colors.grey[300]),
                  IconButton(
                    onPressed: () {
                      _showNotifications();
                    },
                    icon: const Icon(Icons.notifications_none_outlined, size: 26),
                    color: const Color(0xFFF2711C),
                  ),
                  Container(height: 20, width: 1, color: Colors.grey[300]),
                  IconButton(
                    onPressed: () {
                      _debugMapStatus();
                    },
                    icon: const Icon(Icons.info_outline, size: 26),
                    color: const Color(0xFFF2711C),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  // ÎßàÏª§ Ï†ïÎ≥¥ ÌëúÏãú
  void _showMarkerInfo(String title, String description) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text(title),
          content: Text(description),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: const Text('ÌôïÏù∏'),
            ),
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
                _showJobSearch();
              },
              child: const Text('ÏûêÏÑ∏Ìûà Î≥¥Í∏∞'),
            ),
          ],
        );
      },
    );
  }

  // ÏßÄÎèÑ ÎîîÎ≤ÑÍ∑∏ Ï†ïÎ≥¥ ÌëúÏãú
  void _debugMapStatus() {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('üó∫Ô∏è ÏßÄÎèÑ ÏÉÅÌÉú'),
          content: SingleChildScrollView(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text('üìä Ïó∞Í≤∞ ÏÉÅÌÉú:', style: TextStyle(fontWeight: FontWeight.bold)),
                Text('ÌîåÎû´Ìèº: ${kIsWeb ? "Ïõπ" : "Î™®Î∞îÏùº"}'),
                Text('ÏßÄÎèÑ ÌÉÄÏûÖ: ${kIsWeb ? "Ï†ïÏ†Å Ïù¥ÎØ∏ÏßÄ" : "ÎÑ§Ïù¥Î≤ÑÎßµ"}'),
                Text('Ïù∏ÌÑ∞ÎÑ∑: ${_getInternetStatusText()}'),
                Text('ÏßÄÎèÑ Ï§ÄÎπÑ: ${isMapReady ? "‚úÖ ÏôÑÎ£å" : "‚è≥ Î°úÎî© Ï§ë"}'),
                if (!kIsWeb) ...[
                  Text('ÏßÄÎèÑ Ïª®Ìä∏Î°§Îü¨: ${mapController != null ? "‚úÖ ÌôúÏÑ±" : "‚ùå ÏóÜÏùå"}'),
                  Text('ÎßàÏª§ Í∞úÏàò: $markerCountÍ∞ú'),
                ],
                const SizedBox(height: 8),
                if (!kIsWeb) ...[
                  const Text('üîß ÎÑ§Ïù¥Î≤Ñ ÏßÄÎèÑ ÏÑ§Ï†ï:', style: TextStyle(fontWeight: FontWeight.bold)),
                  Text('Client ID: ${EnvironmentConfig.naverMapClientId}'),
                ],
                Text('ÌôòÍ≤Ω: ${EnvironmentConfig.current.name}'),
                const SizedBox(height: 8),
                if (mapError.isNotEmpty) ...[
                  const Text('‚ùå ÏóêÎü¨:', style: TextStyle(fontWeight: FontWeight.bold, color: Colors.red)),
                  Text(mapError, style: const TextStyle(color: Colors.red)),
                  const SizedBox(height: 8),
                ],
                const Text('üí° ÏõπÏóêÏÑú ÏÇ¨Ïö©Î≤ï:', style: TextStyle(fontWeight: FontWeight.bold)),
                const Text('‚Ä¢ ÏõπÏóêÏÑúÎäî Ï†ïÏ†Å ÏßÄÎèÑ Ïù¥ÎØ∏ÏßÄ ÏÇ¨Ïö©'),
                const Text('‚Ä¢ ÎßàÏª§ ÌÅ¥Î¶≠ Ïãú ÎÜçÏû• Ï†ïÎ≥¥ ÌëúÏãú'),
                const Text('‚Ä¢ GitHub Pages Î∞∞Ìè¨ ÏßÄÏõê'),
              ],
            ),
          ),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
                _checkInternetConnection();
              },
              child: const Text('Ïó∞Í≤∞ Ïû¨ÌôïÏù∏'),
            ),
            if (!isMapReady)
              TextButton(
                onPressed: () {
                  Navigator.of(context).pop();
                  _retryMapInitialization();
                },
                child: const Text('ÏßÄÎèÑ Ïû¨ÏãúÎèÑ'),
              ),
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: const Text('ÌôïÏù∏'),
            ),
          ],
        );
      },
    );
  }

  String _getInternetStatusText() {
    if (internetConnected == null) return '‚è≥ ÌôïÏù∏ Ï§ë';
    if (internetConnected == true) return '‚úÖ Ïó∞Í≤∞Îê®';
    return '‚ùå Ïó∞Í≤∞ ÏïàÎê®';
  }

  // ÏßÄÎèÑ Ï¥àÍ∏∞Ìôî Ïû¨ÏãúÎèÑ
  void _retryMapInitialization() {
    setState(() {
      isMapReady = false;
      mapError = '';
      mapController = null;
      markerCount = 0;
      markers.clear();
    });
    print('üîÑ ÏßÄÎèÑ Ï¥àÍ∏∞Ìôî Ïû¨ÏãúÎèÑ');
  }

  // ÌòÑÏû¨ ÏúÑÏπòÎ°ú Ïù¥Îèô
  void _moveToCurrentLocation() {
    if (isMapReady) {
      print('üìç Ï†úÏ£ºÏãú Ï§ëÏã¨ÏúºÎ°ú Ïù¥Îèô');
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(kIsWeb ? 
            'üìç Ï†ïÏ†Å ÏßÄÎèÑÎäî Ïù¥ÎèôÌï† Ïàò ÏóÜÏäµÎãàÎã§' : 
            'üìç Ï†úÏ£ºÏãú Ï§ëÏã¨ÏúºÎ°ú Ïù¥ÎèôÌñàÏäµÎãàÎã§'
          ),
          duration: const Duration(seconds: 2),
        ),
      );
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('ÏßÄÎèÑÍ∞Ä ÏïÑÏßÅ Î°úÎî© Ï§ëÏûÖÎãàÎã§.'),
          duration: Duration(seconds: 2),
        ),
      );
    }
  }

  // ÏïåÎ¶º ÌëúÏãú
  void _showNotifications() {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('üì¢ ÏïåÎ¶º'),
          content: const Text('ÏÉàÎ°úÏö¥ ÎÜçÏû• ÏùºÏûêÎ¶¨Í∞Ä 2Í±¥ Îì±Î°ùÎêòÏóàÏäµÎãàÎã§!\n\nüçä Í∞êÍ∑§ ÏàòÌôï - ÏÑúÍ∑ÄÌè¨\nü•¨ Î∞∞Ï∂î Ïã¨Í∏∞ - Ï†úÏ£ºÏãú'),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: const Text('ÌôïÏù∏'),
            ),
          ],
        );
      },
    );
  }

  // ÏùºÏûêÎ¶¨ Ï∞æÍ∏∞
  void _showJobSearch() {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
      ),
      builder: (BuildContext context) {
        return Container(
          padding: const EdgeInsets.all(24),
          height: MediaQuery.of(context).size.height * 0.8,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              const Text(
                'üçä ÏùºÏûêÎ¶¨ Ï∞æÍ∏∞',
                style: TextStyle(
                  fontSize: 24,
                  fontWeight: FontWeight.bold,
                ),
              ),
              const SizedBox(height: 20),
              const Text(
                'Ï†úÏ£ºÎèÑÏùò ÎÜçÏû• ÏùºÏûêÎ¶¨Î•º Ï∞æÏïÑÎ≥¥ÏÑ∏Ïöî',
                style: TextStyle(
                  fontSize: 16,
                  color: Colors.grey,
                ),
              ),
              const SizedBox(height: 24),
              Expanded(
                child: ListView(
                  children: [
                    _buildJobCard('Í∞êÍ∑§ ÏàòÌôï', 'ÏÑúÍ∑ÄÌè¨Ïãú ÎÇ®ÏõêÏùç', 'ÏãúÍ∞ÑÎãπ 15,000Ïõê', 'üçä'),
                    _buildJobCard('Î∞∞Ï∂î Ïã¨Í∏∞', 'Ï†úÏ£ºÏãú Ï°∞Ï≤úÏùç', 'ÏãúÍ∞ÑÎãπ 12,000Ïõê', 'ü•¨'),
                    _buildJobCard('Î∏åÎ°úÏΩúÎ¶¨ Ìè¨Ïû•', 'ÏÑ±ÏÇ∞Ïùç', 'ÏãúÍ∞ÑÎãπ 13,000Ïõê', 'ü•¶'),
                    _buildJobCard('Í≥†Íµ¨Îßà Ï∫êÍ∏∞', 'ÌïúÎ¶ºÏùç', 'ÏãúÍ∞ÑÎãπ 14,000Ïõê', 'üç†'),
                    _buildJobCard('ÏñëÌåå Ï†ïÎ¶¨', 'Ïï†ÏõîÏùç', 'ÏãúÍ∞ÑÎãπ 11,000Ïõê', 'üßÖ'),
                    _buildJobCard('ÎãπÍ∑º ÏàòÌôï', 'Íµ¨Ï¢åÏùç', 'ÏãúÍ∞ÑÎãπ 13,500Ïõê', 'ü•ï'),
                  ],
                ),
              ),
            ],
          ),
        );
      },
    );
  }

  // ÏùºÏÜê Íµ¨ÌïòÍ∏∞
  void _showWorkerRecruit() {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
      ),
      builder: (BuildContext context) {
        return Container(
          padding: const EdgeInsets.all(24),
          height: MediaQuery.of(context).size.height * 0.7,
          child: const Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                'üöú ÏùºÏÜê Íµ¨ÌïòÍ∏∞',
                style: TextStyle(
                  fontSize: 24,
                  fontWeight: FontWeight.bold,
                ),
              ),
              SizedBox(height: 20),
              Text(
                'ÎÜçÏû•ÏóêÏÑú ÌïÑÏöîÌïú ÏùºÏÜêÏùÑ Íµ¨Ìï¥Î≥¥ÏÑ∏Ïöî',
                style: TextStyle(
                  fontSize: 16,
                  color: Colors.grey,
                ),
              ),
              SizedBox(height: 100),
              Center(
                child: Text(
                  'ÏùºÏÜê Íµ¨ÌïòÍ∏∞ Í∏∞Îä•ÏùÄ\nÏ§ÄÎπÑ Ï§ëÏûÖÎãàÎã§.',
                  style: TextStyle(
                    fontSize: 18,
                    color: Colors.grey,
                  ),
                  textAlign: TextAlign.center,
                ),
              ),
            ],
          ),
        );
      },
    );
  }

  // ÏùºÏûêÎ¶¨ Ïπ¥Îìú ÏúÑÏ†Ø
  Widget _buildJobCard(String title, String location, String pay, String emoji) {
    return Card(
      margin: const EdgeInsets.only(bottom: 12),
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Row(
          children: [
            Container(
              width: 50,
              height: 50,
              decoration: BoxDecoration(
                color: const Color(0xFFF2711C).withOpacity(0.1),
                borderRadius: BorderRadius.circular(8),
              ),
              child: Center(
                child: Text(
                  emoji,
                  style: const TextStyle(fontSize: 24),
                ),
              ),
            ),
            const SizedBox(width: 16),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    title,
                    style: const TextStyle(
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  const SizedBox(height: 4),
                  Text(
                    location,
                    style: const TextStyle(
                      fontSize: 14,
                      color: Colors.grey,
                    ),
                  ),
                  const SizedBox(height: 4),
                  Text(
                    pay,
                    style: const TextStyle(
                      fontSize: 14,
                      fontWeight: FontWeight.w600,
                      color: Color(0xFFF2711C),
                    ),
                  ),
                ],
              ),
            ),
            const Icon(
              Icons.chevron_right,
              color: Colors.grey,
            ),
          ],
        ),
      ),
    );
  }
}
